@use "./src/shared/style/classic/mixin.scss" as *;

.Input {
  display: flex;

  width: 100%;

  transition:
    border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out,
    background-color 0.15s ease-in-out,
    color 0.15s ease-in-out;

  &:hover {
    cursor: text;
  }

  &:focus-visible {
    outline: none;
  }

  &:disabled {
    cursor: not-allowed;

    opacity: 0.5;
  }
}

.Input::placeholder {
  color: hsl(from var(--input-color) h s l / 70%);
}

/* Variants */
.Input[data-variant="primary"] {
  color: var(--color-primary);
  border-style: solid;
  border-color: var(--color-primary);
  background-color: transparent;
  @include ts(background-color, color);
}

.Input[data-variant="primary"]:focus {
  color: var(--color-primary);
  border-color: var(--color-primary);
  background-color: var(--color-background, hsl(var(--background) / 95%));
}

.Input[data-variant="primary-inverted"] {
  color: var(--color-light);
  border-style: solid;
  border-color: var(--color-light);
  background-color: transparent;
  @include ts(background-color, color);
}

.Input[data-variant="primary-inverted"]:focus {
  color: var(--color-light);
  border-color: var(--color-light);
  background-color: var(--color-background, hsl(var(--background) / 10%));
}

.Input[data-variant="destructive"] {
  color: var(
    --color-destructive-foreground,
    hsl(var(--destructive-foreground))
  );
  border-style: solid;
  border-color: var(--color-destructive, hsl(var(--destructive)));
  background-color: var(--color-background, hsl(var(--background)));
  @include ts(background-color, border-color);
}

.Input[data-variant="destructive"]:focus {
  border-color: var(--color-destructive, hsl(var(--destructive) / 90%));
}

.Input[data-variant="outline"] {
  color: var(--color-foreground, hsl(var(--foreground)));
  border-style: solid;
  border-color: var(--color-border, hsl(var(--border)));
  background-color: var(--color-background, hsl(var(--background)));
  @include ts(background-color, border-color);
}

.Input[data-variant="outline"]:focus {
  border-color: var(--color-primary, hsl(var(--primary)));
}

.Input[data-variant="secondary"] {
  color: var(--color-secondary-foreground, hsl(var(--secondary-foreground)));
  border-style: solid;
  border-color: var(--color-secondary, hsl(var(--secondary)));
  background-color: var(--color-background, hsl(var(--background)));
  @include ts(background-color, border-color);
}

.Input[data-variant="secondary"]:focus {
  border-color: var(--color-secondary, hsl(var(--secondary) / 90%));
}

.Input[data-variant="ghost"] {
  color: var(--color-foreground, hsl(var(--foreground)));
  border: 1px solid transparent;
  background-color: var(--color-foreground-hover, hsl(var(--foreground) / 5%));
  @include ts(background-color);
}

.Input[data-variant="ghost"]:focus {
  background-color: var(--color-foreground-hover, hsl(var(--foreground) / 10%));
}

.Input[data-variant="link"] {
  width: max-content;

  color: var(--color-foreground, hsl(var(--foreground)));
  border: none;
  border-bottom: 1px solid var(--color-foreground, hsl(var(--foreground) / 30%));
  background-color: transparent;
  @include ts(color, border-bottom-color);
}

.Input[data-variant="link"]:focus {
  border-bottom-color: var(--color-primary, hsl(var(--primary)));
}

/* sizing */
.Input[data-size="s"] {
  height: 28px;
  padding: 6px 12px;

  border-width: 1px;
  border-radius: 2px;

  font-size: 13px;
  line-height: 22px;
}

.Input[data-size="m"] {
  height: 32px;
  padding: 8px 14px;

  border-width: 1px;
  border-radius: 2px;

  font-size: 14px;
  line-height: 28px;
}

.Input[data-size="l"] {
  // height: 38px;
  padding: 10px 15px;

  border-width: 2px;
  border-radius: 3px;

  font-size: 16px;
  line-height: 32px;
}

.Input[data-size="xl"] {
  height: 46px;
  padding: 12px 16px;

  border-width: 2px;
  border-radius: 3px;

  font-size: 20px;
  line-height: 38px;
}

.passwordButton {
  position: absolute;
  z-index: 2;
  top: 0;
  right: 0;
  bottom: 0;

  margin: auto;
  margin-right: 0.5rem;
  padding: 0;

  border: none;
  background-color: transparent;
}
